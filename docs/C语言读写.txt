打开文件：
     FILE *fopen(const char * filename,const char * mode);
     filename：表示的是字符串
     mode：
          r  只读
          w  允许写入，如果不存在，则会创建覆盖
          a  追加，如果不存在就会创建一个新文件
          r+ 允许读写
          w+ 允许读写，如果文件存在，则文件会被截断为0长度，如果不存在则会创建
          a+ 打开文件，允许读写文件，如果文件不存在，则会创建新文件，读取会从文件的开头开始

关闭文件
    int fclose(FILE *fp);
    关闭成功：返回0
    关闭失败：返回EOF
    函数的实质为清空缓冲区的数据，关闭文件，并释放用于该文件所有的内存。EOF是一个定义在头文件stdio.h中的常量
写入文件
    int fputc(int c,FILE *fp);
    把参数c的字符写入到fp所指向的输出流中，如果写入成功，它会返回写入的字符，如果发生错误，则会返回EOF
    int fputs(const char *s,FILE *fp);
    把字符串s写入到fp所指向的输入流，如果写入成功，会返回一个非负值，如果发生错误，会返回EOF
读取文件：
      int getc(FILE *fp);
      返回的值为读取到的字符
      char *fgets(char *buf,int n,FILE *fp);
      从fp所指向的输入流中读取n - 1个字符，并将读取的字符串复制到缓冲区buf，并在最后追加一个null字符来终止字符串，当然如果函数在读取到最后一个字符之前
      就遇到了一个换行符'\n'或者是文件的末尾EOF，则只会返回读取到的字符，包括换行符。
      int scanf(FILE *fp,const char *format,...)，但是遇到第一个空格和换行符的时候，会停止截取

      例子：
         #include <stdio.h>

		void print_fp() {
		    char *res;
		    FILE *fp = NULL;
		    char buf[255];
		    const char *mode = "r";
		    fp = fopen("C:\\tmp\\temp.txt", mode);
		    /*读取到空格就会停止*/
		    fscanf(fp, "%s", buf);
		    printf("1: %s\n", buf);
		    /*读取到对应的n-1，并将null设置为n位置，或者读取到空格*/
		    res = fgets(buf, 255, fp);
		    printf("res %s 2:%s\n", res, buf);
		    res = fgets(buf, 255, fp);
		    printf("res: %s 3:%s\n", res, buf);
		    fclose(fp);
		}
移动文件指针：
     int fseek(FILE *stream,long offset,int whence);
     fseek设置当前读写点到offset处whence可以是SEEK_SET,SEEK_CUR,SEEK_END 这些值决定是从文件头、当前点和文件尾计算偏移量offset
     例子：
	void replace_char() {
	    FILE *fp = NULL;
	    const char *mode = "w+";
	    fp = fopen("C:\\tmp\\temp.txt",mode);
	    char buff[255];
	    fseek(fp,10,SEEK_SET);
	    if ((char *)putc(65,fp) == "EOF"){
	          printf("put char error\n");
	    }
	    fseek(fp,-10,SEEK_SET);
	    fgets(buff,500,fp);
	    printf("read from the file: %s\n",buff);
	    fclose(fp);
	}