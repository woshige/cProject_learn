存储类定义在C程序中变量/函数的范围（可见性）和生命周期，这些说明符放置在他们所修饰的类之前
       1、auto
           存储类是所有局部变量默认的存储类，auto修饰的变量只能用在函数内，即auto只能修饰局部变量
           {
               int mount;
               auto int month;
           }
       2、register
           register存储类用于定义存储在寄存器中而不是RAM中的局部变量，这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的&
           运算符（因为它没有内存位置）
           {
               register int miles;
           }
           寄存器只用于需要快速访问的变量，比如计数器，还应注意的是，定义register并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。
				#include <stdio.h>
				#include <time.h>

				#define TIME 1000000000
				int m, n = TIME; /*全局变量*/
				int main() {
				time_t start, stop;
				register int a, b = TIME; /*寄存器变量*/
				int x, y = TIME; /*一般变量*/
				time(&start);
				for (a = 0; a < b; a++);
				time(&stop);
				printf("寄存器变量用时：%ld 秒\n", (long) (stop - start));
				time(&start);
				for(x = 0; x < y; x++);
				time(&stop);
				printf("使用一般变量用时：%ld 秒\n",(long)(stop - start));
				}
       3、static
           static存储类，修饰局部变量可以在函数之间保持局部变量的值
            #include <stdio.h>

			void func1(void);
			static int count = 10; /*全局变量 - static是默认的*/
			int main() {
			    while (count--){
			        func1();
			    }
			    return 0;
			}
			void func1(){
			    /**
			     * static表示是func1中的局部变量，但是只会初始化一次，每次调用此函数
			     * 这个tingy的值是不会发生改变的
			     */
			    static int thingy = 5;
			    thingy++;
			    printf("thingy的值为 %d，count 为 %d\n",thingy,count);
			}
       3、extern
            extern存储类用于提供了一个全局引用，全局引用对于所有的程序文件都是可见的，当您使用extern时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置
            例如：
                store.c
                #include <stdio.h>
				extern int paramter;
				void write_extern(void){
				    printf("count is %d\n",paramter);
				}
                main.c
                static int count = 10; /*全局变量 - static是默认的*/
				int paramter = 1;
				extern void write_extern(void);
				int main() {
				    write_extern();
				    while (count--){
				        func1();
				    }
				    return 0;
				}