C语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许你访问底层额数据，在发生错误的时候，大多数的C或者UNIX函数调用返回1或者NULL
，同时会设置一个错误代码errno，该错误代码是全局变量，表示在函数调用期间发生了错误，可以在errno.h
       perror() 显示传给它的字符串，后跟一个冒号、一个空格和当前的errno值的文本形式
       strerror() 返回一个指针，指针指向当前的error值的文本表现形式。

        #include <stdio.h>
		#include <errno.h>
		#include <string.h>
		int main() {
		    FILE *fp;
		    int errnum;
		    fp = fopen("unexits.txt","rb");
		    if(fp == NULL){
		        errnum = errno;
		        fprintf(stderr,"错误号：%d\n",errno);
		        perror("通过perror输出错误");
		        fprintf(stderr,"打开文件错误：%s\n",strerror(errnum));
		    }
		    else{
		        fclose(fp);
		    }
		    return 0;
		}
	除零错误：
	    进行除法运算的时候，如果不检查除数是否为零，会导致另一个运行时的错误

		void zero_errno(){
		    int dividend = 20;
		    int divisor = 0;
		    int quotient;
		    if(divisor == 0){
		        fprintf(stderr,"除数为 0 退出运行...\n");
		        exit(1);
		    }
		    quotient = dividend / divisor;
		    fprintf(stderr,"quotient变量的值为：%d\n",quotient);
		    exit(0);
		}
	程序退出状态
	   通常情况下，程序成功的执行完一个操作正常的退出的是皇后会带有值EXIT_SUCCESS。在这里，EXIT_SUCCESS是宏，它被定义为0，如果程序存在一种错误，
	   当退出程序的时候，会带有状态值EXIT_FILURE，被定义为-1，上面的程序可以写为：
	   void zero_errno(){
		    int dividend = 20;
		    int divisor = 0;
		    int quotient;
		    if(divisor == 0){
		        fprintf(stderr,"除数为 0 退出运行...\n");
		        exit(EXIT_FAILURE);
		    }
		    quotient = dividend / divisor;
		    fprintf(stderr,"quotient变量的值为：%d\n",quotient);
		    exit(EXIT_SUCCESS);
		}