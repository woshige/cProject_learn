C语言为内存的分配和管理提供了几个函数，这些函数可以在<stdlib.h>中找到
    void *calloc(int num,int size); 在内存中动态的分配num个长度为size的连续空间，并将每个字节都初始化为0。
    void free(void *address);  释放address所指向。
    void *malloc(void *address); 在堆区中分配一块指定大小的内存空间，用来存放数据，这块内存空间在函数执行完成后不会被初始化，值是未知的。
    void *realloc(void *address,int newsize); 该函数重新分配内存，把内存扩展到newsize
    动态的分配内存：
       如果预先知道数组的大小，就可以定义char name[20]，但是如果事先不知道存储的文本的长度，例如向您存储一个有关的主题的详细描述，我们需要定义一个指针，
       该指针指向未定义所需要的的内存大小的字符，后续根据需求来分配内存。

    实例：

        #include <stdio.h>
		#include <stdlib.h>
		#include <string.h>
		int main() {
		    char name[50];
		    char *description;
		    strcpy(name,"Zara Ali");
		    /*动态的分配内存*/
		    description = (char *)malloc(200 * sizeof(char));
		    if(description == NULL){
		        fprintf(stderr,"error - unable to allocate required memory\n");
		    }else{
		        strcpy(description,"Zara ali a DPS student in class 10th");
		    }
		    printf("Name = %s\n",name);
		    printf("Description:%s\n",description);
		    return 0;
		}
    重新调整内存的大小和释放内存
        当程序退出时，操作系统会自动的释放所有分配给程序的内存，但是在不需要内存的时候，应该调用free()来释放内存，或者可以使用redlloc()来增加或者是
        减少已分配的内存块的大小。

        void memory_2() {
	    char name[100];
	    char *description;
	    strcpy(name, "zara ali");
	    description = (char *) malloc(30 * sizeof(char));
	    if (description == NULL) {
	        fprintf(stderr, "Error-unable to allocate memory\n");
	    } else {
	        strcpy(description,"zara ali a DPS student.");
	    }
	    /*扩展分配的内存大小*/
	    description = (char *)realloc(description,100 * sizeof(char));
	    if(description == NULL){
	        fprintf(stderr,"Error-unable to allocate memory\n");
	    }else{
	        strcat(description,"she is in class 10th");
	    };
	    printf("name=%s\n",name);
	    printf("description:%s\n",description);
	    /*释放内存*/
	    free(description);
	}