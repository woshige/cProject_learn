C语言提供了typedof关键字，可以使用typedof来对类型取一个新的名字，例如
     typedof unsigned char BYTE;  
     BYTE b1,b2;

     实例：
					    #include <stdio.h>
						#include <string.h>

						/**
						 * 在64位系统上有个4字对齐
						 */
						typedef struct Books {
						    char title[50];
						    char author[50];
						    char subject[50];
						    unsigned int book_id;
						    char s;
						    int c;
						} Book;

						int main() {
						    Book book;
						    strcpy(book.title, "c program");
						    strcpy(book.author, "c");
						    strcpy(book.subject, "how to program");
						    book.book_id = 1;
						    printf("title:%s\n", book.title);
						    printf("author:%s\n", book.author);
						    printf("subject:%s\n", book.subject);
						    printf("book_id:%d\n", book.book_id);
						}
		  typedof和#define
		      区别：typedof仅限于为类型定义符号名称，#define不仅可以为类型定义别名，也能为数值定义别名
		           typedof是由编译器执行解释，#define语句是由预编译器进行处理的
		      （1）#define可以对其他类型说明符对宏定义类型名进行扩展，但是typedof所定义的类型名却不能这样做
		        #define INTERGE int;
				unsigned INTERGE n;  //没问题
				typedef int INTERGE;
				unsigned INTERGE n;  //错误，不能在 INTERGE 前面添加 unsigned
			  （2）在连续定义几个变量的时候，typedof能够保证定义所有的变量为同意的类型，但是#define则无法保证
			    #define PTR_INT int *
				PTR_INT p1, p2;        //p1、p2 类型不相同，宏展开后变为int *p1, p2;
				typedef int * PTR_INT
				PTR_INT p1, p2;        //p1、p2 类型相同，它们都是指向 int 类型的指针。